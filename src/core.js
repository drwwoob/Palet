// //Tokens are generated by the lexer
// export class Token {
//   constructor(tokenNumber, tokenColor) {
//     Object.assign(this, { tokenNumber, tokenColor });
//   }
// }

export class Program {
  constructor(statements) {
    this.statements = statements;
  }
}

export class Assignment {
  constructor(target, source) {
    Object.assign(this, { target, source });
  }
}

export class BinaryExpression {
  constructor(op, left, right) {
    Object.assign(this, { op, left, right });
  }
}

export class UnaryExpression {
  constructor(op, operand) {
    Object.assign(this, { op, operand });
  }
}

export class Call {
  constructor(callee, args) {
    Object.assign(this, { callee, args });
  }
}

export class Function {
  constructor(name, paramCount, readOnly, valueReturning) {
    Object.assign(this, { name, paramCount, readOnly, valueReturning });
  }
}

export const standardLibrary = Object.freeze({
  print: new Function("print", Infinity, true, false),
  print: new Function("goto", 1, true, false),
  print: new Function("gotoIf", 2, true, false),
});